"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.webpack = webpack;

require("core-js/modules/es.promise.js");

var _plugin = _interopRequireDefault(require("vue-loader/lib/plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

async function webpack(config, {
  presets: presets
}) {
  var typescriptOptions = await presets.apply('typescript', {});
  config.plugins.push(new _plugin.default());
  config.module.rules.push({
    test: /\.vue$/,
    loader: require.resolve('vue-loader'),
    options: {}
  });
  config.module.rules.push({
    test: /\.tsx?$/,
    use: [{
      loader: require.resolve('ts-loader'),
      options: {
        transpileOnly: !typescriptOptions.check,
        appendTsSuffixTo: [/\.vue$/]
      }
    }]
  });
  config.resolve.extensions.push('.vue');
  config.resolve.alias = _objectSpread(_objectSpread({}, config.resolve.alias), {}, {
    vue$: require.resolve('vue/dist/vue.esm.js')
  });
  return config;
}