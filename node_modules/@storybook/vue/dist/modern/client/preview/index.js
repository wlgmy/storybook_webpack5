function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import "core-js/modules/es.array.reduce.js";

/* eslint-disable prefer-destructuring */
import Vue from 'vue';
import { start } from '@storybook/core/client';
import './globals';
import render, { VALUES } from './render';
import { extractProps } from './util';
export const WRAPS = 'STORYBOOK_WRAPS';

function prepare(rawStory, innerStory) {
  let story;

  if (typeof rawStory === 'string') {
    story = {
      template: rawStory
    };
  } else if (rawStory != null) {
    story = rawStory;
  } else {
    return null;
  } // @ts-ignore
  // eslint-disable-next-line no-underscore-dangle


  if (!story._isVue) {
    if (innerStory) {
      story.components = Object.assign({}, story.components || {}, {
        story: innerStory
      });
    }

    story = Vue.extend(story); // @ts-ignore // https://github.com/storybookjs/storybook/pull/7578#discussion_r307984824
  } else if (story.options[WRAPS]) {
    return story;
  }

  return Vue.extend({
    // @ts-ignore // https://github.com/storybookjs/storybook/pull/7578#discussion_r307985279
    [WRAPS]: story,
    // @ts-ignore // https://github.com/storybookjs/storybook/pull/7578#discussion_r307984824
    [VALUES]: Object.assign({}, innerStory ? innerStory.options[VALUES] : {}, extractProps(story)),
    functional: true,

    render(h, {
      data,
      parent,
      children
    }) {
      return h(story, Object.assign({}, data, {
        // @ts-ignore // https://github.com/storybookjs/storybook/pull/7578#discussion_r307986196
        props: Object.assign({}, data.props || {}, parent.$root[VALUES])
      }), children);
    }

  });
}

const defaultContext = {
  id: 'unspecified',
  name: 'unspecified',
  kind: 'unspecified',
  parameters: {},
  args: {},
  argTypes: {},
  globals: {}
};

function decorateStory(storyFn, decorators) {
  return decorators.reduce((decorated, decorator) => (context = defaultContext) => {
    let story;
    const decoratedStory = decorator((_ref = {}) => {
      let innerContext = _objectWithoutPropertiesLoose(_ref, ["parameters"]);

      story = decorated(Object.assign({}, context, innerContext));
      return story;
    }, context);

    if (!story) {
      story = decorated(context);
    }

    if (decoratedStory === story) {
      return story;
    }

    return prepare(decoratedStory, story);
  }, context => prepare(storyFn(context)));
}

const framework = 'vue';
const api = start(render, {
  decorateStory
});
export const storiesOf = (kind, m) => {
  return api.clientApi.storiesOf(kind, m).addParameters({
    framework
  });
};
export const configure = (...args) => api.configure(framework, ...args);
export const addDecorator = api.clientApi.addDecorator;
export const addParameters = api.clientApi.addParameters;
export const clearDecorators = api.clientApi.clearDecorators;
export const setAddon = api.clientApi.setAddon;
export const forceReRender = api.forceReRender;
export const getStorybook = api.clientApi.getStorybook;
export const raw = api.clientApi.raw;